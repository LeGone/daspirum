; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Work\daspirum\Source\src\helper.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
PUBLIC	??$cast_to_string@J@dlib@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABJ@Z ; dlib::cast_to_string<long>
PUBLIC	??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
PUBLIC	?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z ; std::basic_ofstream<char,std::char_traits<char> >::open
PUBLIC	?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@HH@Z ; std::basic_ofstream<char,std::char_traits<char> >::open
PUBLIC	?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ofstream<char,std::char_traits<char> >::close
PUBLIC	??0?$allocator@E@std@@QAE@XZ			; std::allocator<unsigned char>::allocator<unsigned char>
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator+=
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator+=
PUBLIC	??H?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator+
PUBLIC	??$_Fill_n@PAEIE@std@@YAXPAEIABE@Z		; std::_Fill_n<unsigned char *,unsigned int,unsigned char>
PUBLIC	??$_Uninit_def_fill_n@EIEE@std@@YAXPAEIPBEAAV?$allocator@E@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_def_fill_n<unsigned char,unsigned int,unsigned char,unsigned char>
PUBLIC	??$_Uninitialized_default_fill_n@PAEIEV?$allocator@E@std@@@std@@YAXPAEIPBEAAV?$allocator@E@0@@Z ; std::_Uninitialized_default_fill_n<unsigned char *,unsigned int,unsigned char,std::allocator<unsigned char> >
PUBLIC	?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::resize
PUBLIC	??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z	; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
PUBLIC	??A?$vector@EV?$allocator@E@std@@@std@@QAEAAEI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
PUBLIC	??0?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@V?$allocator@E@1@@Z ; std::_Vector_val<unsigned char,std::allocator<unsigned char> >::_Vector_val<unsigned char,std::allocator<unsigned char> >
PUBLIC	??0?$vector@EV?$allocator@E@std@@@std@@QAE@$$QAV01@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
PUBLIC	?_Inside@?$vector@EV?$allocator@E@std@@@std@@IBE_NPBE@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Inside
PUBLIC	??$_Allocate@E@std@@YAPAEIPAE@Z			; std::_Allocate<unsigned char>
PUBLIC	?allocate@?$allocator@E@std@@QAEPAEI@Z		; std::allocator<unsigned char>::allocate
PUBLIC	??$_Val_type@PAE@std@@YAPAEPAE@Z		; std::_Val_type<unsigned char *>
PUBLIC	??$_Uninit_move@EEE@std@@YAPAEPAE00AAV?$allocator@E@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<unsigned char,unsigned char,unsigned char>
PUBLIC	??$_Uninitialized_move@PAEPAEV?$allocator@E@std@@@std@@YAPAEPAE00AAV?$allocator@E@0@@Z ; std::_Uninitialized_move<unsigned char *,unsigned char *,std::allocator<unsigned char> >
PUBLIC	??$_Umove@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Umove<unsigned char *>
PUBLIC	?reserve@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::reserve
PUBLIC	?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::size
PUBLIC	?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::capacity
PUBLIC	?max_size@?$allocator@E@std@@QBEIXZ		; std::allocator<unsigned char>::max_size
PUBLIC	?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size
PUBLIC	?_Grow_to@?$vector@EV?$allocator@E@std@@@std@@IBEII@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Grow_to
PUBLIC	?_Xlen@?$vector@EV?$allocator@E@std@@@std@@IBEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlen
PUBLIC	?_Reserve@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reserve
PUBLIC	?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@IBEXPAE0@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Orphan_range
PUBLIC	??$addressof@E@std@@YAPAEAAE@Z			; std::addressof<unsigned char>
PUBLIC	?construct@?$allocator@E@std@@QAEXPAE$$QAE@Z	; std::allocator<unsigned char>::construct
PUBLIC	??$_Cons_val@V?$allocator@E@std@@EE@std@@YAXAAV?$allocator@E@0@PAE$$QAE@Z ; std::_Cons_val<std::allocator<unsigned char>,unsigned char,unsigned char>
PUBLIC	?push_back@?$vector@EV?$allocator@E@std@@@std@@QAEX$$QAE@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::push_back
PUBLIC	??0?$allocator@E@std@@QAE@ABV01@@Z		; std::allocator<unsigned char>::allocator<unsigned char>
PUBLIC	?get_allocator@?$vector@EV?$allocator@E@std@@@std@@QBE?AV?$allocator@E@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::get_allocator
PUBLIC	?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::begin
PUBLIC	?end@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::end
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAE@PAEPBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAE@PAEPBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >
PUBLIC	?_Make_iter@?$vector@EV?$allocator@E@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Make_iter
PUBLIC	??$_Move@PAEPAE@std@@YAPAEPAE00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<unsigned char *,unsigned char *>
PUBLIC	??$_Move@PAEPAE@std@@YAPAEPAE00@Z		; std::_Move<unsigned char *,unsigned char *>
PUBLIC	?erase@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@0@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::erase
PUBLIC	?clear@?$vector@EV?$allocator@E@std@@@std@@QAEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::clear
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::_Compat
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator==
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator!=
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBEABEXZ ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator*
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBEAAEXZ ; std::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator*
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator++
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator++
PUBLIC	??$?9EE@std@@YA_NABV?$allocator@E@0@0@Z		; std::operator!=<unsigned char,unsigned char>
PUBLIC	??$forward@E@std@@YA$$QAEAAE@Z			; std::forward<unsigned char>
PUBLIC	?_Assign_rv@?$vector@EV?$allocator@E@std@@@std@@QAEX$$QAV12@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Assign_rv
PUBLIC	??$forward@V?$vector@EV?$allocator@E@std@@@std@@@std@@YA$$QAV?$vector@EV?$allocator@E@std@@@0@AAV10@@Z ; std::forward<std::vector<unsigned char,std::allocator<unsigned char> > >
PUBLIC	??4?$vector@EV?$allocator@E@std@@@std@@QAEAAV01@$$QAV01@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator=
PUBLIC	??1?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@XZ ; std::_Vector_val<unsigned char,std::allocator<unsigned char> >::~_Vector_val<unsigned char,std::allocator<unsigned char> >
PUBLIC	?deallocate@?$allocator@E@std@@QAEXPAEI@Z	; std::allocator<unsigned char>::deallocate
PUBLIC	??$_Ptr_cat@EE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAE0@Z ; std::_Ptr_cat<unsigned char,unsigned char>
PUBLIC	??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<unsigned char> >
PUBLIC	??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@@Z ; std::_Destroy_range<std::allocator<unsigned char> >
PUBLIC	?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy
PUBLIC	?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
PUBLIC	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
PUBLIC	??$?8EE@std@@YA_NABV?$allocator@E@0@0@Z		; std::operator==<unsigned char,unsigned char>
PUBLIC	??$_Move@AAPAE@std@@YA$$QAPAEAAPAE@Z		; std::_Move<unsigned char * &>
PUBLIC	??$swap@PAE@std@@YAXAAPAE0@Z			; std::swap<unsigned char *>
PUBLIC	??$_Move@AAV?$vector@EV?$allocator@E@std@@@std@@@std@@YA$$QAV?$vector@EV?$allocator@E@std@@@0@AAV10@@Z ; std::_Move<std::vector<unsigned char,std::allocator<unsigned char> > &>
PUBLIC	?swap@?$vector@EV?$allocator@E@std@@@std@@QAEXAAV12@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::swap
PUBLIC	??$min@H@std@@YAABHABH0@Z			; std::min<int>
$SG-58765 DB	'.html', 00H
	ORG $+2
$SG-58766 DB	'-', 00H
	ORG $+2
$SG-58767 DB	'-', 00H
	ORG $+2
$SG-58768 DB	'-', 00H
	ORG $+2
$SG-58769 DB	'-', 00H
	ORG $+2
$SG-58770 DB	'www/log/', 00H
	ORG $+3
$SG-58771 DB	'::', 00H
	ORG $+1
$SG-58772 DB	' Line ', 00H
	ORG $+1
$SG-58773 DB	' -> ', 00H
	ORG $+3
$SG-58774 DB	'</font><br/>', 00H
	ORG $+3
$SG-58775 DB	'">', 00H
	ORG $+1
$SG-58776 DB	'#DD0000', 00H
$SG-58777 DB	'<font color="', 00H
	ORG $+2
$SG-58778 DB	'</font><br/>', 00H
	ORG $+3
$SG-58779 DB	'">', 00H
	ORG $+1
$SG-58780 DB	'<font color="', 00H
	ORG $+2
$SG-58781 DB	'-', 00H
	ORG $+2
$SG-58782 DB	'-', 00H
	ORG $+2
$SG-58783 DB	'-', 00H
	ORG $+2
$SG-58784 DB	'-', 00H
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_move@EEE@std@@YAPAEPAE00AAV?$allocator@E@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@EEE@std@@YAPAEPAE00AAV?$allocator@E@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<unsigned char,unsigned char,unsigned char>, COMDAT
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
; Line 456
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 459
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Count$[ebp], eax
; Line 461
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR __Count$[ebp]
; Line 462
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@EEE@std@@YAPAEPAE00AAV?$allocator@E@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<unsigned char,unsigned char,unsigned char>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Fill_n@PAEIE@std@@YAXPAEIABE@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill_n@PAEIE@std@@YAXPAEIABE@Z PROC			; std::_Fill_n<unsigned char *,unsigned int,unsigned char>, COMDAT
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
; Line 2735
	push	ebp
	mov	ebp, esp
; Line 2736
	jmp	SHORT $LN3@Fill_n
$LN2@Fill_n:
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 1
	mov	DWORD PTR __Dest$[ebp], ecx
$LN3@Fill_n:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Fill_n
; Line 2737
	mov	edx, DWORD PTR __Dest$[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx], cl
	jmp	SHORT $LN2@Fill_n
$LN4@Fill_n:
; Line 2738
	pop	ebp
	ret	0
??$_Fill_n@PAEIE@std@@YAXPAEIABE@Z ENDP			; std::_Fill_n<unsigned char *,unsigned int,unsigned char>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned char> >, COMDAT
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 104
	push	ebp
	mov	ebp, esp
; Line 105
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned char> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Move@PAEPAE@std@@YAPAEPAE00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAEPAE@std@@YAPAEPAE00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<unsigned char *,unsigned char *>, COMDAT
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
; Line 2534
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 2535
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Count$[ebp], eax
; Line 2537
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
; Line 2538
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, DWORD PTR __Count$[ebp]
; Line 2539
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move@PAEPAE@std@@YAPAEPAE00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<unsigned char *,unsigned char *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Uninit_def_fill_n@EIEE@std@@YAXPAEIPBEAAV?$allocator@E@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
$T351794 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_def_fill_n@EIEE@std@@YAXPAEIPBEAAV?$allocator@E@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_def_fill_n<unsigned char,unsigned int,unsigned char,unsigned char>, COMDAT
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
; Line 660
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 661
	mov	BYTE PTR $T351794[ebp], 0
	lea	eax, DWORD PTR $T351794[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Fill_n@PAEIE@std@@YAXPAEIABE@Z	; std::_Fill_n<unsigned char *,unsigned int,unsigned char>
	add	esp, 12					; 0000000cH
; Line 662
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_def_fill_n@EIEE@std@@YAXPAEIPBEAAV?$allocator@E@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_def_fill_n<unsigned char,unsigned int,unsigned char,unsigned char>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@EE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAE0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@EE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAE0@Z PROC ; std::_Ptr_cat<unsigned char,unsigned char>, COMDAT
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
; Line 528
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 530
	mov	al, BYTE PTR __Cat$[ebp]
; Line 531
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@EE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAE0@Z ENDP ; std::_Ptr_cat<unsigned char,unsigned char>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Val_type@PAE@std@@YAPAEPAE@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAE@std@@YAPAEPAE@Z PROC			; std::_Val_type<unsigned char *>, COMDAT
; Line 801
	push	ebp
	mov	ebp, esp
; Line 802
	xor	eax, eax
; Line 803
	pop	ebp
	ret	0
??$_Val_type@PAE@std@@YAPAEPAE@Z ENDP			; std::_Val_type<unsigned char *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Move@AAPAE@std@@YA$$QAPAEAAPAE@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAPAE@std@@YA$$QAPAEAAPAE@Z PROC		; std::_Move<unsigned char * &>, COMDAT
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
; Line 94
	push	ebp
	mov	ebp, esp
; Line 95
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 96
	pop	ebp
	ret	0
??$_Move@AAPAE@std@@YA$$QAPAEAAPAE@Z ENDP		; std::_Move<unsigned char * &>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$addressof@E@std@@YAPAEAAE@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@E@std@@YAPAEAAE@Z PROC			; std::addressof<unsigned char>, COMDAT
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 110
	push	ebp
	mov	ebp, esp
; Line 111
	mov	eax, DWORD PTR __Val$[ebp]
; Line 112
	pop	ebp
	ret	0
??$addressof@E@std@@YAPAEAAE@Z ENDP			; std::addressof<unsigned char>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@@Z
_TEXT	SEGMENT
$T351805 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned char> >, COMDAT
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 88
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@EE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAE0@Z ; std::_Ptr_cat<unsigned char,unsigned char>
	add	esp, 8
	mov	BYTE PTR $T351805[ebp], al
	movzx	edx, BYTE PTR $T351805[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<unsigned char> >
	add	esp, 16					; 00000010H
; Line 89
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned char> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Move@PAEPAE@std@@YAPAEPAE00@Z
_TEXT	SEGMENT
$T351808 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAEPAE@std@@YAPAEPAE00@Z PROC			; std::_Move<unsigned char *,unsigned char *>, COMDAT
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
; Line 2545
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 2547
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@EE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAE0@Z ; std::_Ptr_cat<unsigned char,unsigned char>
	add	esp, 8
	mov	BYTE PTR $T351808[ebp], al
	movzx	edx, BYTE PTR $T351808[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Move@PAEPAE@std@@YAPAEPAE00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<unsigned char *,unsigned char *>
	add	esp, 16					; 00000010H
; Line 2548
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move@PAEPAE@std@@YAPAEPAE00@Z ENDP			; std::_Move<unsigned char *,unsigned char *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$forward@E@std@@YA$$QAEAAE@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@E@std@@YA$$QAEAAE@Z PROC			; std::forward<unsigned char>, COMDAT
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
; Line 78
	push	ebp
	mov	ebp, esp
; Line 79
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 80
	pop	ebp
	ret	0
??$forward@E@std@@YA$$QAEAAE@Z ENDP			; std::forward<unsigned char>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_default_fill_n@PAEIEV?$allocator@E@std@@@std@@YAXPAEIPBEAAV?$allocator@E@0@@Z
_TEXT	SEGMENT
$T351813 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Pval$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_default_fill_n@PAEIEV?$allocator@E@std@@@std@@YAXPAEIPBEAAV?$allocator@E@0@@Z PROC ; std::_Uninitialized_default_fill_n<unsigned char *,unsigned int,unsigned char,std::allocator<unsigned char> >, COMDAT
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
; Line 670
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 672
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@EE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAE0@Z ; std::_Ptr_cat<unsigned char,unsigned char>
	add	esp, 8
	mov	BYTE PTR $T351813[ebp], al
	movzx	edx, BYTE PTR $T351813[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAE@std@@YAPAEPAE@Z	; std::_Val_type<unsigned char *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Pval$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_def_fill_n@EIEE@std@@YAXPAEIPBEAAV?$allocator@E@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_def_fill_n<unsigned char,unsigned int,unsigned char,unsigned char>
	add	esp, 24					; 00000018H
; Line 673
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_default_fill_n@PAEIEV?$allocator@E@std@@@std@@YAXPAEIPBEAAV?$allocator@E@0@@Z ENDP ; std::_Uninitialized_default_fill_n<unsigned char *,unsigned int,unsigned char,std::allocator<unsigned char> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$forward@V?$vector@EV?$allocator@E@std@@@std@@@std@@YA$$QAV?$vector@EV?$allocator@E@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$vector@EV?$allocator@E@std@@@std@@@std@@YA$$QAV?$vector@EV?$allocator@E@std@@@0@AAV10@@Z PROC ; std::forward<std::vector<unsigned char,std::allocator<unsigned char> > >, COMDAT
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
; Line 78
	push	ebp
	mov	ebp, esp
; Line 79
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 80
	pop	ebp
	ret	0
??$forward@V?$vector@EV?$allocator@E@std@@@std@@@std@@YA$$QAV?$vector@EV?$allocator@E@std@@@0@AAV10@@Z ENDP ; std::forward<std::vector<unsigned char,std::allocator<unsigned char> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Move@AAV?$vector@EV?$allocator@E@std@@@std@@@std@@YA$$QAV?$vector@EV?$allocator@E@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAV?$vector@EV?$allocator@E@std@@@std@@@std@@YA$$QAV?$vector@EV?$allocator@E@std@@@0@AAV10@@Z PROC ; std::_Move<std::vector<unsigned char,std::allocator<unsigned char> > &>, COMDAT
; Line 94
	push	ebp
	mov	ebp, esp
; Line 95
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 96
	pop	ebp
	ret	0
??$_Move@AAV?$vector@EV?$allocator@E@std@@@std@@@std@@YA$$QAV?$vector@EV?$allocator@E@std@@@0@AAV10@@Z ENDP ; std::_Move<std::vector<unsigned char,std::allocator<unsigned char> > &>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$swap@PAE@std@@YAXAAPAE0@Z
_TEXT	SEGMENT
__Tmp$ = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@PAE@std@@YAXAAPAE0@Z PROC			; std::swap<unsigned char *>, COMDAT
; Line 101
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 102
	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$_Move@AAPAE@std@@YA$$QAPAEAAPAE@Z	; std::_Move<unsigned char * &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$[ebp], ecx
; Line 103
	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	call	??$_Move@AAPAE@std@@YA$$QAPAEAAPAE@Z	; std::_Move<unsigned char * &>
	add	esp, 4
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
; Line 104
	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	call	??$_Move@AAPAE@std@@YA$$QAPAEAAPAE@Z	; std::_Move<unsigned char * &>
	add	esp, 4
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
; Line 105
	mov	esp, ebp
	pop	ebp
	ret	0
??$swap@PAE@std@@YAXAAPAE0@Z ENDP			; std::swap<unsigned char *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?8EE@std@@YA_NABV?$allocator@E@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8EE@std@@YA_NABV?$allocator@E@0@0@Z PROC		; std::operator==<unsigned char,unsigned char>, COMDAT
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 262
	push	ebp
	mov	ebp, esp
; Line 263
	mov	al, 1
; Line 264
	pop	ebp
	ret	0
??$?8EE@std@@YA_NABV?$allocator@E@0@0@Z ENDP		; std::operator==<unsigned char,unsigned char>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$min@H@std@@YAABHABH0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T351824 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@H@std@@YAABHABH0@Z PROC				; std::min<int>, COMDAT
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
; Line 2106
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 2107
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN3@min
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
$LN4@min:
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR $T351824[ebp], edx
	mov	eax, DWORD PTR $T351824[ebp]
; Line 2108
	mov	esp, ebp
	pop	ebp
	ret	0
??$min@H@std@@YAABHABH0@Z ENDP				; std::min<int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::_Compat, COMDAT
; _this$ = ecx
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 252
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 253
	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::_Compat
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator==, COMDAT
; _this$ = ecx
; Line 201
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 202
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::_Compat
; Line 203
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	sete	cl
	mov	al, cl
; Line 204
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator==
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator+=, COMDAT
; _this$ = ecx
; Line 151
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 168
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR __Off$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 169
	mov	eax, DWORD PTR _this$[ebp]
; Line 170
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator+=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator++, COMDAT
; _this$ = ecx
; Line 93
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 110
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
; Line 112
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator++
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBEABEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBEABEXZ PROC ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator*, COMDAT
; _this$ = ecx
; Line 63
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 84
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 85
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBEABEXZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator*
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@E@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@E@std@@QBEIXZ PROC		; std::allocator<unsigned char>::max_size, COMDAT
; _this$ = ecx
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 217
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 218
	mov	DWORD PTR __Count$[ebp], -1
; Line 219
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@10
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@10
$LN3@max_size@10:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@10:
	mov	eax, DWORD PTR tv65[ebp]
; Line 220
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@E@std@@QBEIXZ ENDP		; std::allocator<unsigned char>::max_size
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@IBEXPAE0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@IBEXPAE0@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Orphan_range, COMDAT
; _this$ = ecx
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 1453
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1454
	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@IBEXPAE0@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Orphan_range
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Inside@?$vector@EV?$allocator@E@std@@@std@@IBE_NPBE@Z
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@EV?$allocator@E@std@@@std@@IBE_NPBE@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Inside, COMDAT
; _this$ = ecx
; Line 1285
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1286
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN3@Inside@10
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside@10
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside@10
$LN3@Inside@10:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside@10:
	mov	al, BYTE PTR tv76[ebp]
; Line 1287
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@EV?$allocator@E@std@@@std@@IBE_NPBE@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Inside
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator!=, COMDAT
; _this$ = ecx
; Line 207
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 208
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 209
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator!=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator+=, COMDAT
; _this$ = ecx
; Line 357
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 358
	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator+=
; Line 359
	mov	eax, DWORD PTR _this$[ebp]
; Line 360
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator+=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator++, COMDAT
; _this$ = ecx
; Line 331
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 332
	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator++
; Line 333
	mov	eax, DWORD PTR _this$[ebp]
; Line 334
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator++
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBEAAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBEAAEXZ PROC ; std::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator*, COMDAT
; _this$ = ecx
; Line 321
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 322
	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBEABEXZ ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator*
; Line 323
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBEAAEXZ ENDP ; std::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator*
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Xlen@?$vector@EV?$allocator@E@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@EV?$allocator@E@std@@@std@@IBEXXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlen, COMDAT
; _this$ = ecx
; Line 1426
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1427
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN2@Xlen@10:
; Line 1428
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@EV?$allocator@E@std@@@std@@IBEXXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlen
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size, COMDAT
; _this$ = ecx
; Line 883
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 884
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?max_size@?$allocator@E@std@@QBEIXZ	; std::allocator<unsigned char>::max_size
; Line 885
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::capacity, COMDAT
; _this$ = ecx
; Line 776
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 777
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx]
; Line 778
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::capacity
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Tmp$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator+, COMDAT
; _this$ = ecx
; Line 363
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 364
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$[ebp], ecx
; Line 365
	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator+=
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 366
	mov	esp, ebp
	pop	ebp
	ret	8
??H?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator+
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@E@std@@QAEXPAEI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@E@std@@QAEXPAEI@Z PROC		; std::allocator<unsigned char>::deallocate, COMDAT
; _this$ = ecx
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 181
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 182
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	DWORD PTR __imp_??3@YAXPAX@Z
	add	esp, 4
; Line 183
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@E@std@@QAEXPAEI@Z ENDP		; std::allocator<unsigned char>::deallocate
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$allocator@E@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@E@std@@QAE@ABV01@@Z PROC			; std::allocator<unsigned char>::allocator<unsigned char>, COMDAT
; _this$ = ecx
; Line 165
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 167
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@E@std@@QAE@ABV01@@Z ENDP			; std::allocator<unsigned char>::allocator<unsigned char>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy, COMDAT
; _this$ = ecx
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 1269
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1270
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@@Z ; std::_Destroy_range<std::allocator<unsigned char> >
	add	esp, 12					; 0000000cH
; Line 1271
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$allocator@E@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@E@std@@QAE@XZ PROC			; std::allocator<unsigned char>::allocator<unsigned char>, COMDAT
; _this$ = ecx
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 161
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 163
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@E@std@@QAE@XZ ENDP			; std::allocator<unsigned char>::allocator<unsigned char>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@XZ PROC	; std::_Vector_val<unsigned char,std::allocator<unsigned char> >::~_Vector_val<unsigned char,std::allocator<unsigned char> >, COMDAT
; _this$ = ecx
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 433
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 434
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@XZ ENDP	; std::_Vector_val<unsigned char,std::allocator<unsigned char> >::~_Vector_val<unsigned char,std::allocator<unsigned char> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@V?$allocator@E@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@V?$allocator@E@1@@Z PROC ; std::_Vector_val<unsigned char,std::allocator<unsigned char> >::_Vector_val<unsigned char,std::allocator<unsigned char> >, COMDAT
; _this$ = ecx
; Line 426
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$allocator@E@std@@QAE@ABV01@@Z	; std::allocator<unsigned char>::allocator<unsigned char>
; Line 427
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 428
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 429
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 430
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@V?$allocator@E@1@@Z ENDP ; std::_Vector_val<unsigned char,std::allocator<unsigned char> >::_Vector_val<unsigned char,std::allocator<unsigned char> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy, COMDAT
; _this$ = ecx
; Line 1301
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1302
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Tidy@2
; Line 1304
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ
; Line 1305
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy
; Line 1307
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?deallocate@?$allocator@E@std@@QAEXPAEI@Z ; std::allocator<unsigned char>::deallocate
$LN1@Tidy@2:
; Line 1309
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 1310
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 1311
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 1312
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??A?$vector@EV?$allocator@E@std@@@std@@QAEAAEI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@EV?$allocator@E@std@@@std@@QAEAAEI@Z PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::operator[], COMDAT
; _this$ = ecx
; Line 928
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 940
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR __Pos$[ebp]
; Line 941
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@EV?$allocator@E@std@@@std@@QAEAAEI@Z ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::size, COMDAT
; _this$ = ecx
; Line 878
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 879
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, DWORD PTR [ecx]
; Line 880
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::size
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >, COMDAT
; _this$ = ecx
; Line 704
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 705
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
; Line 706
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@XZ ; std::_Vector_val<unsigned char,std::allocator<unsigned char> >::~_Vector_val<unsigned char,std::allocator<unsigned char> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@XZ ; std::_Vector_val<unsigned char,std::allocator<unsigned char> >::~_Vector_val<unsigned char,std::allocator<unsigned char> >
__ehhandler$??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
; Function compile flags: /Odtp
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
; Line 132
	push	ebp
	mov	ebp, esp
; Line 133
	mov	eax, DWORD PTR __Time$[ebp]
	push	eax
	call	DWORD PTR __imp___time64
	add	esp, 4
; Line 134
	pop	ebp
	ret	0
_time	ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _localtime_s
_TEXT	SEGMENT
__Tm$ = 8						; size = 4
__Time$ = 12						; size = 4
_localtime_s PROC					; COMDAT
; Line 120
	push	ebp
	mov	ebp, esp
; Line 121
	mov	eax, DWORD PTR __Time$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Tm$[ebp]
	push	ecx
	call	DWORD PTR __imp___localtime64_s
	add	esp, 8
; Line 122
	pop	ebp
	ret	0
_localtime_s ENDP
; Function compile flags: /Odtp
;	COMDAT ??$_Uninitialized_move@PAEPAEV?$allocator@E@std@@@std@@YAPAEPAE00AAV?$allocator@E@0@@Z
_TEXT	SEGMENT
$T356099 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAEPAEV?$allocator@E@std@@@std@@YAPAEPAE00AAV?$allocator@E@0@@Z PROC ; std::_Uninitialized_move<unsigned char *,unsigned char *,std::allocator<unsigned char> >, COMDAT
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
; Line 469
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 471
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@EE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAE0@Z ; std::_Ptr_cat<unsigned char,unsigned char>
	add	esp, 8
	mov	BYTE PTR $T356099[ebp], al
	movzx	edx, BYTE PTR $T356099[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAE@std@@YAPAEPAE@Z	; std::_Val_type<unsigned char *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@EEE@std@@YAPAEPAE00AAV?$allocator@E@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<unsigned char,unsigned char,unsigned char>
	add	esp, 24					; 00000018H
; Line 472
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAEPAEV?$allocator@E@std@@@std@@YAPAEPAE00AAV?$allocator@E@0@@Z ENDP ; std::_Uninitialized_move<unsigned char *,unsigned char *,std::allocator<unsigned char> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@E@std@@QAEXPAE$$QAE@Z
_TEXT	SEGMENT
tv73 = -16						; size = 4
_this$ = -12						; size = 4
$T356103 = -8						; size = 4
$T356102 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@E@std@@QAEXPAE$$QAE@Z PROC	; std::allocator<unsigned char>::construct, COMDAT
; _this$ = ecx
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 201
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 202
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	1
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T356103[ebp], eax
	cmp	DWORD PTR $T356103[ebp], 0
	je	SHORT $LN3@construct@2
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	??$forward@E@std@@YA$$QAEAAE@Z		; std::forward<unsigned char>
	add	esp, 4
	mov	edx, DWORD PTR $T356103[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR $T356103[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct@2
$LN3@construct@2:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct@2:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T356102[ebp], edx
; Line 203
	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@E@std@@QAEXPAE$$QAE@Z ENDP	; std::allocator<unsigned char>::construct
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@E@std@@YAPAEIPAE@Z
_TEXT	SEGMENT
$T356108 = -16						; size = 12
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@E@std@@YAPAEIPAE@Z PROC			; std::_Allocate<unsigned char>, COMDAT
; Line 30
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 31
	mov	DWORD PTR __Ptr$[ebp], 0
; Line 33
	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN4@Allocate@10
; Line 34
	mov	DWORD PTR __Count$[ebp], 0
; Line 35
	jmp	SHORT $LN3@Allocate@10
$LN4@Allocate@10:
; Line 36
	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate@10
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	DWORD PTR __imp_??2@YAPAXI@Z
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate@10
$LN1@Allocate@10:
; Line 37
	push	0
	lea	ecx, DWORD PTR $T356108[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T356108[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN3@Allocate@10:
; Line 39
	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate@10:
; Line 40
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@E@std@@YAPAEIPAE@Z ENDP			; std::_Allocate<unsigned char>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Umove@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Umove<unsigned char *>, COMDAT
; _this$ = ecx
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 1322
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1325
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Uninitialized_move@PAEPAEV?$allocator@E@std@@@std@@YAPAEPAE00AAV?$allocator@E@0@@Z ; std::_Uninitialized_move<unsigned char *,unsigned char *,std::allocator<unsigned char> >
	add	esp, 16					; 00000010H
; Line 1326
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Umove<unsigned char *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@E@std@@EE@std@@YAXAAV?$allocator@E@0@PAE$$QAE@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@E@std@@EE@std@@YAXAAV?$allocator@E@0@PAE$$QAE@Z PROC ; std::_Cons_val<std::allocator<unsigned char>,unsigned char,unsigned char>, COMDAT
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 279
	push	ebp
	mov	ebp, esp
; Line 280
	mov	eax, DWORD PTR __Src$[ebp]
	push	eax
	call	??$forward@E@std@@YA$$QAEAAE@Z		; std::forward<unsigned char>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Pdest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Alval$[ebp]
	call	?construct@?$allocator@E@std@@QAEXPAE$$QAE@Z ; std::allocator<unsigned char>::construct
; Line 281
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@E@std@@EE@std@@YAXAAV?$allocator@E@0@PAE$$QAE@Z ENDP ; std::_Cons_val<std::allocator<unsigned char>,unsigned char,unsigned char>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?9EE@std@@YA_NABV?$allocator@E@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9EE@std@@YA_NABV?$allocator@E@0@0@Z PROC		; std::operator!=<unsigned char,unsigned char>, COMDAT
; Line 270
	push	ebp
	mov	ebp, esp
; Line 271
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	??$?8EE@std@@YA_NABV?$allocator@E@0@0@Z	; std::operator==<unsigned char,unsigned char>
	add	esp, 8
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 272
	pop	ebp
	ret	0
??$?9EE@std@@YA_NABV?$allocator@E@0@0@Z ENDP		; std::operator!=<unsigned char,unsigned char>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAE@PAEPBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAE@PAEPBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >, COMDAT
; _this$ = ecx
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 45
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 46
	mov	edx, DWORD PTR __Pvector$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z	; std::_Iterator_base0::_Adopt
; Line 47
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAE@PAEPBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@E@std@@QAEPAEI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@E@std@@QAEPAEI@Z PROC		; std::allocator<unsigned char>::allocate, COMDAT
; _this$ = ecx
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 186
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 187
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@E@std@@YAPAEIPAE@Z		; std::_Allocate<unsigned char>
	add	esp, 8
; Line 188
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@E@std@@QAEPAEI@Z ENDP		; std::allocator<unsigned char>::allocate
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAE@PAEPBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAE@PAEPBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >, COMDAT
; _this$ = ecx
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 304
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAE@PAEPBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >
; Line 305
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAE@PAEPBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Grow_to@?$vector@EV?$allocator@E@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -12						; size = 4
_this$ = -8						; size = 4
__Capacity$ = -4					; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@EV?$allocator@E@std@@@std@@IBEII@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Grow_to, COMDAT
; _this$ = ecx
; Line 1274
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1275
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax
; Line 1278
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to@10
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to@10
$LN4@Grow_to@10:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to@10:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
; Line 1279
	mov	ecx, DWORD PTR __Capacity$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to@10
; Line 1280
	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx
$LN1@Grow_to@10:
; Line 1281
	mov	eax, DWORD PTR __Capacity$[ebp]
; Line 1282
	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@EV?$allocator@E@std@@@std@@IBEII@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Grow_to
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?get_allocator@?$vector@EV?$allocator@E@std@@@std@@QBE?AV?$allocator@E@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$vector@EV?$allocator@E@std@@@std@@QBE?AV?$allocator@E@2@XZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::get_allocator, COMDAT
; _this$ = ecx
; Line 893
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 894
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$allocator@E@std@@QAE@ABV01@@Z	; std::allocator<unsigned char>::allocator<unsigned char>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 895
	mov	esp, ebp
	pop	ebp
	ret	4
?get_allocator@?$vector@EV?$allocator@E@std@@@std@@QBE?AV?$allocator@E@2@XZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::get_allocator
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@EV?$allocator@E@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@EV?$allocator@E@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Make_iter, COMDAT
; _this$ = ecx
; Line 801
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 802
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAE@PAEPBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 803
	mov	esp, ebp
	pop	ebp
	ret	8
?_Make_iter@?$vector@EV?$allocator@E@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Make_iter
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?reserve@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__catchsym$?reserve@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z$0
__tryblocktable$?reserve@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
__Size$100154 = -24					; size = 4
__Ptr$100147 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::reserve, COMDAT
; _this$ = ecx
; Line 746
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?reserve@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 747
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN5@reserve@2
; Line 748
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@EV?$allocator@E@std@@@std@@IBEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlen
	jmp	$LN7@reserve@2
$LN5@reserve@2:
; Line 749
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN7@reserve@2
; Line 751
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?allocate@?$allocator@E@std@@QAEPAEI@Z	; std::allocator<unsigned char>::allocate
	mov	DWORD PTR __Ptr$100147[ebp], eax
; Line 753
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 754
	mov	ecx, DWORD PTR __Ptr$100147[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Umove<unsigned char *>
	jmp	SHORT $LN8@reserve@2
__catch$?reserve@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z$0:
; Line 756
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$100147[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?deallocate@?$allocator@E@std@@QAEXPAEI@Z ; std::allocator<unsigned char>::deallocate
; Line 757
	push	0
	push	0
	call	__CxxThrowException@8
; Line 758
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?reserve@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z$1
	ret	0
$LN8@reserve@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?reserve@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z$1:
; Line 760
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::size
	mov	DWORD PTR __Size$100154[ebp], eax
; Line 761
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN1@reserve@2
; Line 763
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy
; Line 765
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?deallocate@?$allocator@E@std@@QAEXPAEI@Z ; std::allocator<unsigned char>::deallocate
$LN1@reserve@2:
; Line 768
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ
; Line 769
	mov	eax, DWORD PTR __Ptr$100147[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 770
	mov	edx, DWORD PTR __Ptr$100147[ebp]
	add	edx, DWORD PTR __Size$100154[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 771
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Ptr$100147[ebp]
	mov	DWORD PTR [ecx], edx
$LN7@reserve@2:
; Line 773
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?reserve@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::reserve
; Function compile flags: /Odtp
;	COMDAT ?_Reserve@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Size$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reserve, COMDAT
; _this$ = ecx
; Line 1290
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 1291
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::size
	mov	DWORD PTR __Size$[ebp], eax
; Line 1292
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size
	sub	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Size$[ebp]
	jae	SHORT $LN4@Reserve@2
; Line 1293
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@EV?$allocator@E@std@@@std@@IBEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlen
	jmp	SHORT $LN6@Reserve@2
$LN4@Reserve@2:
; Line 1294
	mov	eax, DWORD PTR __Size$[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Size$[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::capacity
	cmp	DWORD PTR __Size$[ebp], eax
	ja	SHORT $LN2@Reserve@2
; Line 1296
	jmp	SHORT $LN6@Reserve@2
$LN2@Reserve@2:
; Line 1297
	mov	ecx, DWORD PTR __Size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@EV?$allocator@E@std@@@std@@IBEII@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::reserve
$LN6@Reserve@2:
; Line 1298
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reserve
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?erase@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T356148 = -16						; size = 4
__Ptr$99943 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@0@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::erase, COMDAT
; _this$ = ecx
; Line 1190
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx
; Line 1191
	mov	eax, DWORD PTR __First_arg$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@EV?$allocator@E@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Make_iter
; Line 1192
	mov	edx, DWORD PTR __Last_arg$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@EV?$allocator@E@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Make_iter
; Line 1194
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator!=
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@erase
; Line 1207
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Move@PAEPAE@std@@YAPAEPAE00@Z	; std::_Move<unsigned char *,unsigned char *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$99943[ebp], eax
; Line 1210
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR __Ptr$99943[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy
; Line 1211
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Ptr$99943[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN1@erase:
; Line 1213
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T356148[ebp], eax
	mov	ecx, DWORD PTR $T356148[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@EV?$allocator@E@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Make_iter
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1214
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@0@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::erase
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@XZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::end, COMDAT
; _this$ = ecx
; Line 791
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 792
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAE@PAEPBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 793
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@XZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::end
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@XZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::begin, COMDAT
; _this$ = ecx
; Line 781
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 782
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAE@PAEPBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 783
	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@XZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T356160 = -24						; size = 4
$T356159 = -20						; size = 4
$T356158 = -16						; size = 4
$T356157 = -12						; size = 4
$T356156 = -8						; size = 4
$T356155 = -4						; size = 4
__Newsize$ = 8						; size = 4
?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::resize, COMDAT
; _this$ = ecx
; Line 857
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx
; Line 858
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::size
	cmp	DWORD PTR __Newsize$[ebp], eax
	jae	SHORT $LN3@resize
; Line 859
	lea	eax, DWORD PTR $T356156[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::end
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T356155[ebp], ecx
	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	lea	eax, DWORD PTR $T356159[ebp]
	push	eax
	lea	ecx, DWORD PTR $T356158[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::begin
	mov	ecx, eax
	call	??H?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator+
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T356157[ebp], edx
	mov	eax, DWORD PTR $T356155[ebp]
	push	eax
	mov	ecx, DWORD PTR $T356157[ebp]
	push	ecx
	lea	edx, DWORD PTR $T356160[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@0@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::erase
	jmp	SHORT $LN4@resize
$LN3@resize:
; Line 860
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN4@resize
; Line 862
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reserve
; Line 864
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	??$_Uninitialized_default_fill_n@PAEIEV?$allocator@E@std@@@std@@YAXPAEIPBEAAV?$allocator@E@0@@Z ; std::_Uninitialized_default_fill_n<unsigned char *,unsigned int,unsigned char,std::allocator<unsigned char> >
	add	esp, 16					; 00000010H
; Line 865
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN4@resize:
; Line 867
	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::resize
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z$0
__ehfuncinfo$??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T356163 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >, COMDAT
; _this$ = ecx
; Line 517
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T356163[ebp], esp
	call	??0?$allocator@E@std@@QAE@XZ		; std::allocator<unsigned char>::allocator<unsigned char>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@V?$allocator@E@1@@Z ; std::_Vector_val<unsigned char,std::allocator<unsigned char> >::_Vector_val<unsigned char,std::allocator<unsigned char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 518
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::resize
; Line 519
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@XZ ; std::_Vector_val<unsigned char,std::allocator<unsigned char> >::~_Vector_val<unsigned char,std::allocator<unsigned char> >
__ehhandler$??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@EV?$allocator@E@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T358380 = -20						; size = 4
$T358379 = -16						; size = 4
$T358378 = -12						; size = 4
$T358377 = -8						; size = 4
$T358376 = -4						; size = 4
?clear@?$vector@EV?$allocator@E@std@@@std@@QAEXXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::clear, COMDAT
; _this$ = ecx
; Line 1217
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx
; Line 1218
	lea	eax, DWORD PTR $T358377[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::end
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T358376[ebp], ecx
	lea	edx, DWORD PTR $T358379[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::begin
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR $T358378[ebp], eax
	mov	ecx, DWORD PTR $T358376[ebp]
	push	ecx
	mov	edx, DWORD PTR $T358378[ebp]
	push	edx
	lea	eax, DWORD PTR $T358380[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@0@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::erase
; Line 1219
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@EV?$allocator@E@std@@@std@@QAEXXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::clear
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@EV?$allocator@E@std@@@std@@QAEX$$QAE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Idx$100128 = -4					; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@EV?$allocator@E@std@@@std@@QAEX$$QAE@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::push_back, COMDAT
; _this$ = ecx
; Line 631
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
; Line 632
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@E@std@@YAPAEAAE@Z		; std::addressof<unsigned char>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@EV?$allocator@E@std@@@std@@IBE_NPBE@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@push_back@2
; Line 634
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$addressof@E@std@@YAPAEAAE@Z		; std::addressof<unsigned char>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx]
	mov	DWORD PTR __Idx$100128[ebp], eax
; Line 635
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN3@push_back@2
; Line 636
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reserve
$LN3@push_back@2:
; Line 637
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@IBEXPAE0@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Orphan_range
; Line 640
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR __Idx$100128[ebp]
	push	ecx
	call	??$forward@E@std@@YA$$QAEAAE@Z		; std::forward<unsigned char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	??$_Cons_val@V?$allocator@E@std@@EE@std@@YAXAAV?$allocator@E@0@PAE$$QAE@Z ; std::_Cons_val<std::allocator<unsigned char>,unsigned char,unsigned char>
	add	esp, 12					; 0000000cH
; Line 641
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 643
	jmp	SHORT $LN5@push_back@2
$LN4@push_back@2:
; Line 645
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN1@push_back@2
; Line 646
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reserve
$LN1@push_back@2:
; Line 647
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@IBEXPAE0@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Orphan_range
; Line 650
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$forward@E@std@@YA$$QAEAAE@Z		; std::forward<unsigned char>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	??$_Cons_val@V?$allocator@E@std@@EE@std@@YAXAAV?$allocator@E@0@PAE$$QAE@Z ; std::_Cons_val<std::allocator<unsigned char>,unsigned char,unsigned char>
	add	esp, 12					; 0000000cH
; Line 651
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN5@push_back@2:
; Line 653
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@EV?$allocator@E@std@@@std@@QAEX$$QAE@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::push_back
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Assign_rv@?$vector@EV?$allocator@E@std@@@std@@QAEX$$QAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T358387 = -12						; size = 4
$T358386 = -6						; size = 1
$T358385 = -5						; size = 1
__Next$99886 = -4					; size = 4
__Right$ = 8						; size = 4
?_Assign_rv@?$vector@EV?$allocator@E@std@@@std@@QAEX$$QAV12@@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Assign_rv, COMDAT
; _this$ = ecx
; Line 606
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
; Line 607
	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN7@Assign_rv
	jmp	$LN8@Assign_rv
$LN7@Assign_rv:
; Line 609
	lea	ecx, DWORD PTR $T358385[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?get_allocator@?$vector@EV?$allocator@E@std@@@std@@QBE?AV?$allocator@E@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::get_allocator
	push	eax
	lea	edx, DWORD PTR $T358386[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_allocator@?$vector@EV?$allocator@E@std@@@std@@QBE?AV?$allocator@E@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::get_allocator
	push	eax
	call	??$?9EE@std@@YA_NABV?$allocator@E@0@0@Z	; std::operator!=<unsigned char,unsigned char>
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@Assign_rv
; Line 611
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@EV?$allocator@E@std@@@std@@QAEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::clear
; Line 612
	lea	ecx, DWORD PTR __Next$99886[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::begin
	jmp	SHORT $LN4@Assign_rv
$LN3@Assign_rv:
; Line 613
	lea	ecx, DWORD PTR __Next$99886[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator++
$LN4@Assign_rv:
	lea	edx, DWORD PTR $T358387[ebp]
	push	edx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?end@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::end
	push	eax
	lea	ecx, DWORD PTR __Next$99886[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator!=
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Assign_rv
; Line 614
	lea	ecx, DWORD PTR __Next$99886[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@EV?$allocator@E@std@@@std@@@std@@QBEAAEXZ ; std::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > >::operator*
	push	eax
	call	??$forward@E@std@@YA$$QAEAAE@Z		; std::forward<unsigned char>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push_back@?$vector@EV?$allocator@E@std@@@std@@QAEX$$QAE@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::push_back
	jmp	SHORT $LN3@Assign_rv
$LN2@Assign_rv:
; Line 616
	jmp	SHORT $LN8@Assign_rv
$LN5@Assign_rv:
; Line 618
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
; Line 619
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z
; Line 620
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
; Line 621
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
; Line 622
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
; Line 624
	mov	edx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [edx], 0
; Line 625
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 626
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [ecx+8], 0
$LN8@Assign_rv:
; Line 628
	mov	esp, ebp
	pop	ebp
	ret	4
?_Assign_rv@?$vector@EV?$allocator@E@std@@@std@@QAEX$$QAV12@@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Assign_rv
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??4?$vector@EV?$allocator@E@std@@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??4?$vector@EV?$allocator@E@std@@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::operator=, COMDAT
; _this$ = ecx
; Line 600
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 601
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$forward@V?$vector@EV?$allocator@E@std@@@std@@@std@@YA$$QAV?$vector@EV?$allocator@E@std@@@0@AAV10@@Z ; std::forward<std::vector<unsigned char,std::allocator<unsigned char> > >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Assign_rv@?$vector@EV?$allocator@E@std@@@std@@QAEX$$QAV12@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Assign_rv
; Line 602
	mov	eax, DWORD PTR _this$[ebp]
; Line 603
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@EV?$allocator@E@std@@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::operator=
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@EV?$allocator@E@std@@@std@@QAE@$$QAV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@EV?$allocator@E@std@@@std@@QAE@$$QAV01@@Z$0
__ehfuncinfo$??0?$vector@EV?$allocator@E@std@@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@EV?$allocator@E@std@@@std@@QAE@$$QAV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$vector@EV?$allocator@E@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T358392 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$vector@EV?$allocator@E@std@@@std@@QAE@$$QAV01@@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >, COMDAT
; _this$ = ecx
; Line 595
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@EV?$allocator@E@std@@@std@@QAE@$$QAV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 12					; 0000000cH
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T358392[ebp], esp
	push	eax
	call	??0?$allocator@E@std@@QAE@ABV01@@Z	; std::allocator<unsigned char>::allocator<unsigned char>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@V?$allocator@E@1@@Z ; std::_Vector_val<unsigned char,std::allocator<unsigned char> >::_Vector_val<unsigned char,std::allocator<unsigned char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 596
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	call	??$forward@V?$vector@EV?$allocator@E@std@@@std@@@std@@YA$$QAV?$vector@EV?$allocator@E@std@@@0@AAV10@@Z ; std::forward<std::vector<unsigned char,std::allocator<unsigned char> > >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Assign_rv@?$vector@EV?$allocator@E@std@@@std@@QAEX$$QAV12@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Assign_rv
; Line 597
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@EV?$allocator@E@std@@@std@@QAE@$$QAV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@EV?$allocator@E@std@@@std@@QAE@XZ ; std::_Vector_val<unsigned char,std::allocator<unsigned char> >::~_Vector_val<unsigned char,std::allocator<unsigned char> >
__ehhandler$??0?$vector@EV?$allocator@E@std@@@std@@QAE@$$QAV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@EV?$allocator@E@std@@@std@@QAE@$$QAV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@EV?$allocator@E@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?swap@?$vector@EV?$allocator@E@std@@@std@@QAEXAAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?swap@?$vector@EV?$allocator@E@std@@@std@@QAEXAAV12@@Z$0
__ehfuncinfo$?swap@?$vector@EV?$allocator@E@std@@@std@@QAEXAAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?swap@?$vector@EV?$allocator@E@std@@@std@@QAEXAAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?swap@?$vector@EV?$allocator@E@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -32						; size = 4
__Ts$96901 = -28					; size = 16
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?swap@?$vector@EV?$allocator@E@std@@@std@@QAEXAAV12@@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::swap, COMDAT
; _this$ = ecx
; Line 1222
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?swap@?$vector@EV?$allocator@E@std@@@std@@QAEXAAV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1223
	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN4@swap
	jmp	$LN5@swap
$LN4@swap:
; Line 1225
	mov	ecx, DWORD PTR __Right$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	??$?8EE@std@@YA_NABV?$allocator@E@0@0@Z	; std::operator==<unsigned char,unsigned char>
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@swap
; Line 1227
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z
; Line 1228
	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??$swap@PAE@std@@YAXAAPAE0@Z		; std::swap<unsigned char *>
	add	esp, 8
; Line 1229
	mov	ecx, DWORD PTR __Right$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	call	??$swap@PAE@std@@YAXAAPAE0@Z		; std::swap<unsigned char *>
	add	esp, 8
; Line 1230
	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	call	??$swap@PAE@std@@YAXAAPAE0@Z		; std::swap<unsigned char *>
	add	esp, 8
; Line 1232
	jmp	SHORT $LN5@swap
$LN2@swap:
; Line 1234
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$_Move@AAV?$vector@EV?$allocator@E@std@@@std@@@std@@YA$$QAV?$vector@EV?$allocator@E@std@@@0@AAV10@@Z ; std::_Move<std::vector<unsigned char,std::allocator<unsigned char> > &>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Ts$96901[ebp]
	call	??0?$vector@EV?$allocator@E@std@@@std@@QAE@$$QAV01@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1236
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$_Move@AAV?$vector@EV?$allocator@E@std@@@std@@@std@@YA$$QAV?$vector@EV?$allocator@E@std@@@0@AAV10@@Z ; std::_Move<std::vector<unsigned char,std::allocator<unsigned char> > &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$vector@EV?$allocator@E@std@@@std@@QAEAAV01@$$QAV01@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator=
; Line 1237
	lea	ecx, DWORD PTR __Ts$96901[ebp]
	push	ecx
	call	??$_Move@AAV?$vector@EV?$allocator@E@std@@@std@@@std@@YA$$QAV?$vector@EV?$allocator@E@std@@@0@AAV10@@Z ; std::_Move<std::vector<unsigned char,std::allocator<unsigned char> > &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	??4?$vector@EV?$allocator@E@std@@@std@@QAEAAV01@$$QAV01@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator=
; Line 1238
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Ts$96901[ebp]
	call	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
$LN5@swap:
; Line 1239
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?swap@?$vector@EV?$allocator@E@std@@@std@@QAEXAAV12@@Z$0:
	lea	ecx, DWORD PTR __Ts$96901[ebp]
	jmp	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
__ehhandler$?swap@?$vector@EV?$allocator@E@std@@@std@@QAEXAAV12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?swap@?$vector@EV?$allocator@E@std@@@std@@QAEXAAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?swap@?$vector@EV?$allocator@E@std@@@std@@QAEXAAV12@@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::swap
; Function compile flags: /Odtp
;	COMDAT ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ch$ = 8						; size = 1
__Off$ = 12						; size = 4
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind, COMDAT
; _this$ = ecx
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 1690
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1691
	push	1
	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ch$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
; Line 1692
	mov	esp, ebp
	pop	ebp
	ret	8
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
_TEXT	ENDS
PUBLIC	?levenshtein_distance@helper@@YAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; helper::levenshtein_distance
;	COMDAT xdata$x
; File c:\work\daspirum\source\src\helper.cpp
xdata$x	SEGMENT
__unwindtable$?levenshtein_distance@helper@@YAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?levenshtein_distance@helper@@YAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?levenshtein_distance@helper@@YAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1
__ehfuncinfo$?levenshtein_distance@helper@@YAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?levenshtein_distance@helper@@YAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?levenshtein_distance@helper@@YAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
_TEXT	SEGMENT
$T358416 = -73						; size = 1
$T358415 = -72						; size = 4
$T358414 = -68						; size = 4
$T358413 = -64						; size = 4
_j$94355 = -58						; size = 1
_i$94351 = -57						; size = 1
_i$94347 = -56						; size = 4
_prevCol$ = -52						; size = 16
_len2$ = -36						; size = 4
_len1$ = -32						; size = 4
_col$ = -28						; size = 16
__$EHRec$ = -12						; size = 12
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
?levenshtein_distance@helper@@YAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z PROC ; helper::levenshtein_distance, COMDAT
; Line 126
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?levenshtein_distance@helper@@YAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 127
	mov	ecx, DWORD PTR _s1$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	mov	DWORD PTR _len1$[ebp], eax
	mov	ecx, DWORD PTR _s2$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	mov	DWORD PTR _len2$[ebp], eax
; Line 128
	mov	eax, DWORD PTR _len2$[ebp]
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR _col$[ebp]
	call	??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _len2$[ebp]
	add	ecx, 1
	push	ecx
	lea	ecx, DWORD PTR _prevCol$[ebp]
	call	??0?$vector@EV?$allocator@E@std@@@std@@QAE@I@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 130
	mov	DWORD PTR _i$94347[ebp], 0
	jmp	SHORT $LN9@levenshtei
$LN8@levenshtei:
	mov	edx, DWORD PTR _i$94347[ebp]
	add	edx, 1
	mov	DWORD PTR _i$94347[ebp], edx
$LN9@levenshtei:
	lea	ecx, DWORD PTR _prevCol$[ebp]
	call	?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::size
	cmp	DWORD PTR _i$94347[ebp], eax
	jae	SHORT $LN7@levenshtei
; Line 131
	mov	eax, DWORD PTR _i$94347[ebp]
	push	eax
	lea	ecx, DWORD PTR _prevCol$[ebp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QAEAAEI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	cl, BYTE PTR _i$94347[ebp]
	mov	BYTE PTR [eax], cl
	jmp	SHORT $LN8@levenshtei
$LN7@levenshtei:
; Line 133
	mov	BYTE PTR _i$94351[ebp], 0
	jmp	SHORT $LN6@levenshtei
$LN5@levenshtei:
	mov	dl, BYTE PTR _i$94351[ebp]
	add	dl, 1
	mov	BYTE PTR _i$94351[ebp], dl
$LN6@levenshtei:
	movzx	eax, BYTE PTR _i$94351[ebp]
	cmp	eax, DWORD PTR _len1$[ebp]
	jae	$LN4@levenshtei
; Line 135
	movzx	ebx, BYTE PTR _i$94351[ebp]
	add	ebx, 1
	push	0
	lea	ecx, DWORD PTR _col$[ebp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QAEAAEI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	BYTE PTR [eax], bl
; Line 136
	mov	BYTE PTR _j$94355[ebp], 0
	jmp	SHORT $LN3@levenshtei
$LN2@levenshtei:
	mov	cl, BYTE PTR _j$94355[ebp]
	add	cl, 1
	mov	BYTE PTR _j$94355[ebp], cl
$LN3@levenshtei:
	movzx	edx, BYTE PTR _j$94355[ebp]
	cmp	edx, DWORD PTR _len2$[ebp]
	jae	$LN1@levenshtei
; Line 137
	movzx	eax, BYTE PTR _j$94355[ebp]
	push	eax
	lea	ecx, DWORD PTR _prevCol$[ebp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QAEAAEI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	movzx	esi, BYTE PTR [eax]
	movzx	ecx, BYTE PTR _i$94351[ebp]
	push	ecx
	mov	ecx, DWORD PTR _s1$[ebp]
	call	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
	movsx	edi, BYTE PTR [eax]
	movzx	edx, BYTE PTR _j$94355[ebp]
	push	edx
	mov	ecx, DWORD PTR _s2$[ebp]
	call	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
	movsx	eax, BYTE PTR [eax]
	xor	ecx, ecx
	cmp	edi, eax
	setne	cl
	add	esi, ecx
	mov	DWORD PTR $T358413[ebp], esi
	movzx	edx, BYTE PTR _j$94355[ebp]
	add	edx, 1
	push	edx
	lea	ecx, DWORD PTR _prevCol$[ebp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QAEAAEI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	movzx	eax, BYTE PTR [eax]
	add	eax, 1
	mov	DWORD PTR $T358414[ebp], eax
	movzx	ecx, BYTE PTR _j$94355[ebp]
	push	ecx
	lea	ecx, DWORD PTR _col$[ebp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QAEAAEI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	movzx	edx, BYTE PTR [eax]
	add	edx, 1
	mov	DWORD PTR $T358415[ebp], edx
	lea	eax, DWORD PTR $T358413[ebp]
	push	eax
	lea	ecx, DWORD PTR $T358414[ebp]
	push	ecx
	lea	edx, DWORD PTR $T358415[ebp]
	push	edx
	call	??$min@H@std@@YAABHABH0@Z		; std::min<int>
	add	esp, 8
	push	eax
	call	??$min@H@std@@YAABHABH0@Z		; std::min<int>
	add	esp, 8
	mov	esi, eax
	movzx	eax, BYTE PTR _j$94355[ebp]
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR _col$[ebp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QAEAAEI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	cl, BYTE PTR [esi]
	mov	BYTE PTR [eax], cl
	jmp	$LN2@levenshtei
$LN1@levenshtei:
; Line 139
	lea	edx, DWORD PTR _prevCol$[ebp]
	push	edx
	lea	ecx, DWORD PTR _col$[ebp]
	call	?swap@?$vector@EV?$allocator@E@std@@@std@@QAEXAAV12@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::swap
; Line 140
	jmp	$LN5@levenshtei
$LN4@levenshtei:
; Line 141
	mov	eax, DWORD PTR _len2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _prevCol$[ebp]
	call	??A?$vector@EV?$allocator@E@std@@@std@@QAEAAEI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR $T358416[ebp], cl
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _prevCol$[ebp]
	call	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _col$[ebp]
	call	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
	mov	al, BYTE PTR $T358416[ebp]
; Line 142
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?levenshtein_distance@helper@@YAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0:
	lea	ecx, DWORD PTR _col$[ebp]
	jmp	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
__unwindfunclet$?levenshtein_distance@helper@@YAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1:
	lea	ecx, DWORD PTR _prevCol$[ebp]
	jmp	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
__ehhandler$?levenshtein_distance@helper@@YAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?levenshtein_distance@helper@@YAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?levenshtein_distance@helper@@YAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ENDP ; helper::levenshtein_distance
; Function compile flags: /Odtp
;	COMDAT ?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Filename$ = 8						; size = 4
__Mode$ = 12						; size = 4
__Prot$ = 16						; size = 4
?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::open, COMDAT
; _this$ = ecx
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
; Line 1087
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1088
	mov	eax, DWORD PTR __Prot$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mode$[ebp]
	or	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __Filename$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
	test	eax, eax
	jne	SHORT $LN2@open@2
; Line 1089
	push	0
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
; Line 1090
	jmp	SHORT $LN3@open@2
$LN2@open@2:
; Line 1091
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
$LN3@open@2:
; Line 1092
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::open
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Str$ = 8						; size = 4
__Mode$ = 12						; size = 4
__Prot$ = 16						; size = 4
?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@HH@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::open, COMDAT
; _this$ = ecx
; Line 1098
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1099
	mov	eax, DWORD PTR __Prot$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Str$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z ; std::basic_ofstream<char,std::char_traits<char> >::open
; Line 1100
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@HH@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::open
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File e:\library\dlib\dlib\string\string.h
xdata$x	SEGMENT
__unwindtable$??$cast_to_string@J@dlib@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$cast_to_string@J@dlib@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABJ@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$cast_to_string@J@dlib@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABJ@Z$0
__ehfuncinfo$??$cast_to_string@J@dlib@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABJ@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$cast_to_string@J@dlib@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$cast_to_string@J@dlib@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABJ@Z
_TEXT	SEGMENT
$T365079 = -216						; size = 4
_sout$ = -212						; size = 152
$T100747 = -60						; size = 44
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_item$ = 12						; size = 4
??$cast_to_string@J@dlib@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABJ@Z PROC ; dlib::cast_to_string<long>, COMDAT
; Line 236
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$cast_to_string@J@dlib@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T365079[ebp], 0
; Line 237
	push	1
	push	2
	lea	ecx, DWORD PTR _sout$[ebp]
	call	??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 238
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _sout$[ebp]
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@J@Z
; Line 239
	mov	edx, DWORD PTR _sout$[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR _sout$[ebp+eax]
	call	DWORD PTR __imp_??7ios_base@std@@QBE_NXZ
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@cast_to_st@2
; Line 240
	lea	ecx, DWORD PTR $T100747[ebp]
	call	??0cast_to_string_error@dlib@@QAE@XZ	; dlib::cast_to_string_error::cast_to_string_error
	push	OFFSET __TI3?AVcast_to_string_error@dlib@@
	lea	edx, DWORD PTR $T100747[ebp]
	push	edx
	call	__CxxThrowException@8
$LN1@cast_to_st@2:
; Line 241
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sout$[ebp]
	call	?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
	mov	ecx, DWORD PTR $T365079[ebp]
	or	ecx, 1
	mov	DWORD PTR $T365079[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _sout$[ebp]
	call	??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@cast_to_st@2:
; Line 242
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$cast_to_string@J@dlib@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABJ@Z$0:
	lea	ecx, DWORD PTR _sout$[ebp]
	jmp	??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$??$cast_to_string@J@dlib@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABJ@Z$1:
	mov	eax, DWORD PTR $T365079[ebp]
	and	eax, 1
	je	$LN6@cast_to_st@2
	and	DWORD PTR $T365079[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN6@cast_to_st@2:
	ret	0
__ehhandler$??$cast_to_string@J@dlib@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$cast_to_string@J@dlib@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$cast_to_string@J@dlib@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABJ@Z ENDP ; dlib::cast_to_string<long>
; Function compile flags: /Odtp
;	COMDAT ?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::close, COMDAT
; _this$ = ecx
; File e:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
; Line 1109
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1110
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
	test	eax, eax
	jne	SHORT $LN2@close@3
; Line 1111
	push	0
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
$LN2@close@3:
; Line 1112
	mov	esp, ebp
	pop	ebp
	ret	0
?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::close
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ$1
__ehfuncinfo$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T365091 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_$initVBases$ = 8					; size = 4
??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx
; Line 933
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T365091[ebp], 0
	cmp	DWORD PTR _$initVBases$[ebp], 0
	je	SHORT $LN1@basic_ofst
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	DWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR $T365091[ebp]
	or	ecx, 1
	mov	DWORD PTR $T365091[ebp], ecx
$LN1@basic_ofst:
	push	0
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx], OFFSET ??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
; Line 934
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ$0:
	mov	eax, DWORD PTR $T365091[ebp]
	and	eax, 1
	je	$LN5@basic_ofst
	and	DWORD PTR $T365091[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	jmp	DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
$LN5@basic_ofst:
	ret	0
__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	DWORD PTR __imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
__ehhandler$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
PUBLIC	__$ArrayPad$
PUBLIC	?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; helper::getDateTimeAsString
;	COMDAT xdata$x
; File c:\work\daspirum\source\src\helper.cpp
xdata$x	SEGMENT
__unwindtable$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$12
__ehfuncinfo$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	0dH
	DD	FLAT:__unwindtable$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
tv202 = -536						; size = 4
tv218 = -532						; size = 4
tv200 = -528						; size = 4
tv217 = -524						; size = 4
tv198 = -520						; size = 4
tv216 = -516						; size = 4
tv196 = -512						; size = 4
tv215 = -508						; size = 4
tv194 = -504						; size = 4
tv214 = -500						; size = 4
tv192 = -496						; size = 4
tv213 = -492						; size = 4
tv190 = -488						; size = 4
tv212 = -484						; size = 4
tv188 = -480						; size = 4
tv211 = -476						; size = 4
tv186 = -472						; size = 4
tv210 = -468						; size = 4
tv184 = -464						; size = 4
tv209 = -460						; size = 4
tv182 = -456						; size = 4
tv208 = -452						; size = 4
tv180 = -448						; size = 4
tv207 = -444						; size = 4
tv178 = -440						; size = 4
tv68 = -436						; size = 4
$T366776 = -432						; size = 4
$T366761 = -428						; size = 4
_timeinfo$ = -424					; size = 36
_rawtime$ = -388					; size = 8
$T94010 = -380						; size = 28
$T94007 = -352						; size = 28
$T94006 = -324						; size = 28
$T94004 = -296						; size = 28
$T94003 = -268						; size = 28
$T94001 = -240						; size = 28
$T94000 = -212						; size = 28
$T93998 = -184						; size = 28
$T93997 = -156						; size = 28
$T93999 = -128						; size = 28
$T94002 = -100						; size = 28
$T94005 = -72						; size = 28
$T94008 = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; helper::getDateTimeAsString, COMDAT
; Line 105
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 524				; 0000020cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T366776[ebp], 0
; Line 107
	lea	eax, DWORD PTR _rawtime$[ebp]
	push	eax
	call	_time
	add	esp, 4
; Line 111
	lea	ecx, DWORD PTR _rawtime$[ebp]
	push	ecx
	lea	edx, DWORD PTR _timeinfo$[ebp]
	push	edx
	call	_localtime_s
	add	esp, 8
; Line 112
	mov	eax, DWORD PTR _timeinfo$[ebp+20]
	add	eax, 1900				; 0000076cH
	mov	DWORD PTR $T366761[ebp], eax
	lea	ecx, DWORD PTR _timeinfo$[ebp+4]
	push	ecx
	lea	edx, DWORD PTR $T94008[ebp]
	push	edx
	call	??$cast_to_string@H@dlib@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABH@Z ; dlib::cast_to_string<int>
	add	esp, 8
	mov	DWORD PTR tv68[ebp], eax
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv178[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _timeinfo$[ebp+8]
	push	ecx
	lea	edx, DWORD PTR $T94005[ebp]
	push	edx
	call	??$cast_to_string@H@dlib@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABH@Z ; dlib::cast_to_string<int>
	add	esp, 8
	mov	DWORD PTR tv207[ebp], eax
	mov	eax, DWORD PTR tv207[ebp]
	mov	DWORD PTR tv180[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _timeinfo$[ebp+12]
	push	ecx
	lea	edx, DWORD PTR $T94002[ebp]
	push	edx
	call	??$cast_to_string@H@dlib@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABH@Z ; dlib::cast_to_string<int>
	add	esp, 8
	mov	DWORD PTR tv208[ebp], eax
	mov	eax, DWORD PTR tv208[ebp]
	mov	DWORD PTR tv182[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _timeinfo$[ebp+16]
	push	ecx
	lea	edx, DWORD PTR $T93999[ebp]
	push	edx
	call	??$cast_to_string@H@dlib@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABH@Z ; dlib::cast_to_string<int>
	add	esp, 8
	mov	DWORD PTR tv209[ebp], eax
	mov	eax, DWORD PTR tv209[ebp]
	mov	DWORD PTR tv184[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T366761[ebp]
	push	ecx
	lea	edx, DWORD PTR $T93997[ebp]
	push	edx
	call	??$cast_to_string@H@dlib@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABH@Z ; dlib::cast_to_string<int>
	add	esp, 8
	mov	DWORD PTR tv210[ebp], eax
	mov	eax, DWORD PTR tv210[ebp]
	mov	DWORD PTR tv186[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	push	OFFSET $SG-58784
	mov	ecx, DWORD PTR tv186[ebp]
	push	ecx
	lea	edx, DWORD PTR $T93998[ebp]
	push	edx
	call	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv211[ebp], eax
	mov	eax, DWORD PTR tv211[ebp]
	mov	DWORD PTR tv188[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR tv184[ebp]
	push	ecx
	mov	edx, DWORD PTR tv188[ebp]
	push	edx
	lea	eax, DWORD PTR $T94000[ebp]
	push	eax
	call	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@ABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv212[ebp], eax
	mov	ecx, DWORD PTR tv212[ebp]
	mov	DWORD PTR tv190[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	push	OFFSET $SG-58783
	mov	edx, DWORD PTR tv190[ebp]
	push	edx
	lea	eax, DWORD PTR $T94001[ebp]
	push	eax
	call	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv213[ebp], eax
	mov	ecx, DWORD PTR tv213[ebp]
	mov	DWORD PTR tv192[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	edx, DWORD PTR tv182[ebp]
	push	edx
	mov	eax, DWORD PTR tv192[ebp]
	push	eax
	lea	ecx, DWORD PTR $T94003[ebp]
	push	ecx
	call	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@ABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv214[ebp], eax
	mov	edx, DWORD PTR tv214[ebp]
	mov	DWORD PTR tv194[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	push	OFFSET $SG-58782
	mov	eax, DWORD PTR tv194[ebp]
	push	eax
	lea	ecx, DWORD PTR $T94004[ebp]
	push	ecx
	call	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv215[ebp], eax
	mov	edx, DWORD PTR tv215[ebp]
	mov	DWORD PTR tv196[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	eax, DWORD PTR tv180[ebp]
	push	eax
	mov	ecx, DWORD PTR tv196[ebp]
	push	ecx
	lea	edx, DWORD PTR $T94006[ebp]
	push	edx
	call	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@ABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv216[ebp], eax
	mov	eax, DWORD PTR tv216[ebp]
	mov	DWORD PTR tv198[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	push	OFFSET $SG-58781
	mov	ecx, DWORD PTR tv198[ebp]
	push	ecx
	lea	edx, DWORD PTR $T94007[ebp]
	push	edx
	call	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv217[ebp], eax
	mov	eax, DWORD PTR tv217[ebp]
	mov	DWORD PTR tv200[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	ecx, DWORD PTR tv178[ebp]
	push	ecx
	mov	edx, DWORD PTR tv200[ebp]
	push	edx
	lea	eax, DWORD PTR $T94010[ebp]
	push	eax
	call	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@ABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv218[ebp], eax
	mov	ecx, DWORD PTR tv218[ebp]
	mov	DWORD PTR tv202[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	edx, DWORD PTR tv202[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T366776[ebp]
	or	eax, 1
	mov	DWORD PTR $T366776[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR $T94010[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR $T94007[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T94006[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR $T94004[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR $T94003[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T94001[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T94000[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T93998[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T93997[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T93999[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T94002[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T94005[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T94008[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 122
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0:
	lea	ecx, DWORD PTR $T94008[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1:
	lea	ecx, DWORD PTR $T94005[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$2:
	lea	ecx, DWORD PTR $T94002[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$3:
	lea	ecx, DWORD PTR $T93999[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$4:
	lea	ecx, DWORD PTR $T93997[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$5:
	lea	ecx, DWORD PTR $T93998[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$6:
	lea	ecx, DWORD PTR $T94000[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$7:
	lea	ecx, DWORD PTR $T94001[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$8:
	lea	ecx, DWORD PTR $T94003[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$9:
	lea	ecx, DWORD PTR $T94004[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$10:
	lea	ecx, DWORD PTR $T94006[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$11:
	lea	ecx, DWORD PTR $T94007[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$12:
	lea	ecx, DWORD PTR $T94010[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-528]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?getDateTimeAsString@helper@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; helper::getDateTimeAsString
PUBLIC	?message@log@helper@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; helper::log::message
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?message@log@helper@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?message@log@helper@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?message@log@helper@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$1
__ehfuncinfo$?message@log@helper@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?message@log@helper@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?message@log@helper@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
_TEXT	SEGMENT
_logfile$ = -188					; size = 168
__$EHRec$ = -12						; size = 12
_sMessage$ = 8						; size = 28
_csColor$ = 36						; size = 4
?message@log@helper@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z PROC ; helper::log::message, COMDAT
; Line 67
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?message@log@helper@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 176				; 000000b0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 68
	push	1
	lea	ecx, DWORD PTR _logfile$[ebp]
	call	??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 70
	push	64					; 00000040H
	push	8
	push	OFFSET ?gTime@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; gTime
	lea	ecx, DWORD PTR _logfile$[ebp]
	call	?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@HH@Z ; std::basic_ofstream<char,std::char_traits<char> >::open
; Line 74
	push	OFFSET $SG-58778
	lea	eax, DWORD PTR _sMessage$[ebp]
	push	eax
	push	OFFSET $SG-58779
	mov	ecx, DWORD PTR _csColor$[ebp]
	push	ecx
	push	OFFSET $SG-58780
	lea	edx, DWORD PTR _logfile$[ebp]
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
; Line 75
	lea	ecx, DWORD PTR _logfile$[ebp]
	call	?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ofstream<char,std::char_traits<char> >::close
; Line 78
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	lea	ecx, DWORD PTR _sMessage$[ebp]
	push	ecx
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
; Line 94
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _logfile$[ebp]
	call	??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sMessage$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?message@log@helper@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$0:
	lea	ecx, DWORD PTR _sMessage$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?message@log@helper@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$1:
	lea	ecx, DWORD PTR _logfile$[ebp]
	jmp	??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
__ehhandler$?message@log@helper@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-180]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?message@log@helper@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?message@log@helper@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ENDP ; helper::log::message
PUBLIC	__$ArrayPad$
PUBLIC	?error@log@helper@@YAXPBD0JV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; helper::log::error
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?error@log@helper@@YAXPBD0JV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?error@log@helper@@YAXPBD0JV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?error@log@helper@@YAXPBD0JV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?error@log@helper@@YAXPBD0JV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?error@log@helper@@YAXPBD0JV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3
__ehfuncinfo$?error@log@helper@@YAXPBD0JV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?error@log@helper@@YAXPBD0JV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?error@log@helper@@YAXPBD0JV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
tv162 = -252						; size = 4
tv70 = -248						; size = 4
_logfile$ = -244					; size = 168
_sOut$ = -72						; size = 28
$T93928 = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_file$ = 8						; size = 4
_function$ = 12						; size = 4
_line$ = 16						; size = 4
_sError$ = 20						; size = 28
?error@log@helper@@YAXPBD0JV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; helper::log::error, COMDAT
; Line 39
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?error@log@helper@@YAXPBD0JV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 240				; 000000f0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 40
	push	1
	lea	ecx, DWORD PTR _logfile$[ebp]
	call	??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 41
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sOut$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 44
	push	64					; 00000040H
	push	8
	push	OFFSET ?gTime@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; gTime
	lea	ecx, DWORD PTR _logfile$[ebp]
	call	?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@HH@Z ; std::basic_ofstream<char,std::char_traits<char> >::open
; Line 45
	mov	ecx, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
	push	ecx
	push	92					; 0000005cH
	lea	ecx, DWORD PTR _sOut$[ebp]
	call	?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
	add	eax, 1
	push	eax
	push	0
	lea	ecx, DWORD PTR _sOut$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Line 50
	push	OFFSET $SG-58771
	lea	ecx, DWORD PTR _sOut$[ebp]
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Line 51
	mov	edx, DWORD PTR _function$[ebp]
	push	edx
	lea	ecx, DWORD PTR _sOut$[ebp]
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Line 52
	push	OFFSET $SG-58772
	lea	ecx, DWORD PTR _sOut$[ebp]
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Line 53
	lea	eax, DWORD PTR _line$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93928[ebp]
	push	ecx
	call	??$cast_to_string@J@dlib@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABJ@Z ; dlib::cast_to_string<long>
	add	esp, 8
	mov	DWORD PTR tv70[ebp], eax
	mov	edx, DWORD PTR tv70[ebp]
	mov	DWORD PTR tv162[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR tv162[ebp]
	push	eax
	lea	ecx, DWORD PTR _sOut$[ebp]
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T93928[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Line 54
	push	OFFSET $SG-58773
	lea	ecx, DWORD PTR _sOut$[ebp]
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Line 55
	lea	ecx, DWORD PTR _sError$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _sOut$[ebp]
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Line 56
	push	OFFSET $SG-58774
	lea	edx, DWORD PTR _sOut$[ebp]
	push	edx
	push	OFFSET $SG-58775
	push	OFFSET $SG-58776
	push	OFFSET $SG-58777
	lea	eax, DWORD PTR _logfile$[ebp]
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
; Line 57
	lea	ecx, DWORD PTR _logfile$[ebp]
	call	?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ofstream<char,std::char_traits<char> >::close
; Line 60
	mov	ecx, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	ecx
	lea	edx, DWORD PTR _sOut$[ebp]
	push	edx
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
; Line 64
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _sOut$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _logfile$[ebp]
	call	??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sError$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?error@log@helper@@YAXPBD0JV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
	lea	ecx, DWORD PTR _sError$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?error@log@helper@@YAXPBD0JV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
	lea	ecx, DWORD PTR _logfile$[ebp]
	jmp	??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
__unwindfunclet$?error@log@helper@@YAXPBD0JV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2:
	lea	ecx, DWORD PTR _sOut$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?error@log@helper@@YAXPBD0JV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3:
	lea	ecx, DWORD PTR $T93928[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?error@log@helper@@YAXPBD0JV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?error@log@helper@@YAXPBD0JV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?error@log@helper@@YAXPBD0JV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; helper::log::error
PUBLIC	__$ArrayPad$
PUBLIC	?init@log@helper@@YAXXZ				; helper::log::init
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?init@log@helper@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?init@log@helper@@YAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?init@log@helper@@YAXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?init@log@helper@@YAXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?init@log@helper@@YAXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?init@log@helper@@YAXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?init@log@helper@@YAXXZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$?init@log@helper@@YAXXZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$?init@log@helper@@YAXXZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$?init@log@helper@@YAXXZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$?init@log@helper@@YAXXZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$?init@log@helper@@YAXXZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?init@log@helper@@YAXXZ$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?init@log@helper@@YAXXZ$12
	DD	0cH
	DD	FLAT:__unwindfunclet$?init@log@helper@@YAXXZ$13
	DD	0dH
	DD	FLAT:__unwindfunclet$?init@log@helper@@YAXXZ$14
__ehfuncinfo$?init@log@helper@@YAXXZ DD 019930522H
	DD	0fH
	DD	FLAT:__unwindtable$?init@log@helper@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?init@log@helper@@YAXXZ
_TEXT	SEGMENT
tv216 = -604						; size = 4
tv231 = -600						; size = 4
tv214 = -596						; size = 4
tv230 = -592						; size = 4
tv212 = -588						; size = 4
tv229 = -584						; size = 4
tv210 = -580						; size = 4
tv228 = -576						; size = 4
tv208 = -572						; size = 4
tv227 = -568						; size = 4
tv206 = -564						; size = 4
tv226 = -560						; size = 4
tv204 = -556						; size = 4
tv225 = -552						; size = 4
tv202 = -548						; size = 4
tv224 = -544						; size = 4
tv200 = -540						; size = 4
tv223 = -536						; size = 4
tv198 = -532						; size = 4
tv222 = -528						; size = 4
tv196 = -524						; size = 4
tv221 = -520						; size = 4
tv194 = -516						; size = 4
tv220 = -512						; size = 4
tv192 = -508						; size = 4
tv219 = -504						; size = 4
tv190 = -500						; size = 4
tv218 = -496						; size = 4
tv188 = -492						; size = 4
tv217 = -488						; size = 4
$T366811 = -484						; size = 4
_timeinfo$ = -480					; size = 36
_rawtime$ = -444					; size = 8
$T93692 = -436						; size = 28
$T93691 = -408						; size = 28
$T93689 = -380						; size = 28
$T93688 = -352						; size = 28
$T93686 = -324						; size = 28
$T93685 = -296						; size = 28
$T93683 = -268						; size = 28
$T93682 = -240						; size = 28
$T93616 = -212						; size = 28
$T93615 = -184						; size = 28
$T93614 = -156						; size = 28
$T93617 = -128						; size = 28
$T93684 = -100						; size = 28
$T93687 = -72						; size = 28
$T93690 = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?init@log@helper@@YAXXZ PROC				; helper::log::init, COMDAT
; Line 19
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?init@log@helper@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 592				; 00000250H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 21
	lea	eax, DWORD PTR _rawtime$[ebp]
	push	eax
	call	_time
	add	esp, 4
; Line 25
	lea	ecx, DWORD PTR _rawtime$[ebp]
	push	ecx
	lea	edx, DWORD PTR _timeinfo$[ebp]
	push	edx
	call	_localtime_s
	add	esp, 8
; Line 28
	mov	eax, DWORD PTR _timeinfo$[ebp+20]
	add	eax, 1900				; 0000076cH
	mov	DWORD PTR $T366811[ebp], eax
	lea	ecx, DWORD PTR _timeinfo$[ebp+4]
	push	ecx
	lea	edx, DWORD PTR $T93690[ebp]
	push	edx
	call	??$cast_to_string@H@dlib@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABH@Z ; dlib::cast_to_string<int>
	add	esp, 8
	mov	DWORD PTR tv217[ebp], eax
	mov	eax, DWORD PTR tv217[ebp]
	mov	DWORD PTR tv188[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _timeinfo$[ebp+8]
	push	ecx
	lea	edx, DWORD PTR $T93687[ebp]
	push	edx
	call	??$cast_to_string@H@dlib@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABH@Z ; dlib::cast_to_string<int>
	add	esp, 8
	mov	DWORD PTR tv218[ebp], eax
	mov	eax, DWORD PTR tv218[ebp]
	mov	DWORD PTR tv190[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _timeinfo$[ebp+12]
	push	ecx
	lea	edx, DWORD PTR $T93684[ebp]
	push	edx
	call	??$cast_to_string@H@dlib@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABH@Z ; dlib::cast_to_string<int>
	add	esp, 8
	mov	DWORD PTR tv219[ebp], eax
	mov	eax, DWORD PTR tv219[ebp]
	mov	DWORD PTR tv192[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _timeinfo$[ebp+16]
	push	ecx
	lea	edx, DWORD PTR $T93617[ebp]
	push	edx
	call	??$cast_to_string@H@dlib@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABH@Z ; dlib::cast_to_string<int>
	add	esp, 8
	mov	DWORD PTR tv220[ebp], eax
	mov	eax, DWORD PTR tv220[ebp]
	mov	DWORD PTR tv194[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T366811[ebp]
	push	ecx
	lea	edx, DWORD PTR $T93614[ebp]
	push	edx
	call	??$cast_to_string@H@dlib@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABH@Z ; dlib::cast_to_string<int>
	add	esp, 8
	mov	DWORD PTR tv221[ebp], eax
	mov	eax, DWORD PTR tv221[ebp]
	mov	DWORD PTR tv196[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR tv196[ebp]
	push	ecx
	push	OFFSET $SG-58770
	lea	edx, DWORD PTR $T93615[ebp]
	push	edx
	call	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv222[ebp], eax
	mov	eax, DWORD PTR tv222[ebp]
	mov	DWORD PTR tv198[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	push	OFFSET $SG-58769
	mov	ecx, DWORD PTR tv198[ebp]
	push	ecx
	lea	edx, DWORD PTR $T93616[ebp]
	push	edx
	call	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv223[ebp], eax
	mov	eax, DWORD PTR tv223[ebp]
	mov	DWORD PTR tv200[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR tv194[ebp]
	push	ecx
	mov	edx, DWORD PTR tv200[ebp]
	push	edx
	lea	eax, DWORD PTR $T93682[ebp]
	push	eax
	call	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@ABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv224[ebp], eax
	mov	ecx, DWORD PTR tv224[ebp]
	mov	DWORD PTR tv202[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	push	OFFSET $SG-58768
	mov	edx, DWORD PTR tv202[ebp]
	push	edx
	lea	eax, DWORD PTR $T93683[ebp]
	push	eax
	call	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv225[ebp], eax
	mov	ecx, DWORD PTR tv225[ebp]
	mov	DWORD PTR tv204[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	edx, DWORD PTR tv192[ebp]
	push	edx
	mov	eax, DWORD PTR tv204[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93685[ebp]
	push	ecx
	call	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@ABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv226[ebp], eax
	mov	edx, DWORD PTR tv226[ebp]
	mov	DWORD PTR tv206[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	push	OFFSET $SG-58767
	mov	eax, DWORD PTR tv206[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93686[ebp]
	push	ecx
	call	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv227[ebp], eax
	mov	edx, DWORD PTR tv227[ebp]
	mov	DWORD PTR tv208[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	eax, DWORD PTR tv190[ebp]
	push	eax
	mov	ecx, DWORD PTR tv208[ebp]
	push	ecx
	lea	edx, DWORD PTR $T93688[ebp]
	push	edx
	call	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@ABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv228[ebp], eax
	mov	eax, DWORD PTR tv228[ebp]
	mov	DWORD PTR tv210[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	push	OFFSET $SG-58766
	mov	ecx, DWORD PTR tv210[ebp]
	push	ecx
	lea	edx, DWORD PTR $T93689[ebp]
	push	edx
	call	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv229[ebp], eax
	mov	eax, DWORD PTR tv229[ebp]
	mov	DWORD PTR tv212[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	ecx, DWORD PTR tv188[ebp]
	push	ecx
	mov	edx, DWORD PTR tv212[ebp]
	push	edx
	lea	eax, DWORD PTR $T93691[ebp]
	push	eax
	call	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@ABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv230[ebp], eax
	mov	ecx, DWORD PTR tv230[ebp]
	mov	DWORD PTR tv214[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	push	OFFSET $SG-58765
	mov	edx, DWORD PTR tv214[ebp]
	push	edx
	lea	eax, DWORD PTR $T93692[ebp]
	push	eax
	call	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv231[ebp], eax
	mov	ecx, DWORD PTR tv231[ebp]
	mov	DWORD PTR tv216[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	edx, DWORD PTR tv216[ebp]
	push	edx
	mov	ecx, OFFSET ?gTime@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; gTime
	call	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	ecx, DWORD PTR $T93692[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR $T93691[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR $T93689[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR $T93688[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T93686[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR $T93685[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR $T93683[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T93682[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T93616[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T93615[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T93614[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T93617[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T93684[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T93687[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T93690[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Line 36
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?init@log@helper@@YAXXZ$0:
	lea	ecx, DWORD PTR $T93690[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@log@helper@@YAXXZ$1:
	lea	ecx, DWORD PTR $T93687[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@log@helper@@YAXXZ$2:
	lea	ecx, DWORD PTR $T93684[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@log@helper@@YAXXZ$3:
	lea	ecx, DWORD PTR $T93617[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@log@helper@@YAXXZ$4:
	lea	ecx, DWORD PTR $T93614[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@log@helper@@YAXXZ$5:
	lea	ecx, DWORD PTR $T93615[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@log@helper@@YAXXZ$6:
	lea	ecx, DWORD PTR $T93616[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@log@helper@@YAXXZ$7:
	lea	ecx, DWORD PTR $T93682[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@log@helper@@YAXXZ$8:
	lea	ecx, DWORD PTR $T93683[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@log@helper@@YAXXZ$9:
	lea	ecx, DWORD PTR $T93685[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@log@helper@@YAXXZ$10:
	lea	ecx, DWORD PTR $T93686[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@log@helper@@YAXXZ$11:
	lea	ecx, DWORD PTR $T93688[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@log@helper@@YAXXZ$12:
	lea	ecx, DWORD PTR $T93689[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@log@helper@@YAXXZ$13:
	lea	ecx, DWORD PTR $T93691[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@log@helper@@YAXXZ$14:
	lea	ecx, DWORD PTR $T93692[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?init@log@helper@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-596]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?init@log@helper@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?init@log@helper@@YAXXZ ENDP				; helper::log::init
; Function compile flags: /Odtp
;	COMDAT ??__Esa@dlib@@YAXXZ
text$yc	SEGMENT
$T374820 = -1						; size = 1
??__Esa@dlib@@YAXXZ PROC				; dlib::`dynamic initializer for 'sa'', COMDAT
; File e:\library\dlib\dlib\string\string.h
; Line 488
	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T374820[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Esa@dlib@@YAXXZ ENDP				; dlib::`dynamic initializer for 'sa''
; Function compile flags: /Odtp
text$yc	ENDS
;	COMDAT ??__EgTime@@YAXXZ
text$yc	SEGMENT
??__EgTime@@YAXXZ PROC					; `dynamic initializer for 'gTime'', COMDAT
; File c:\work\daspirum\source\src\helper.cpp
; Line 12
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?gTime@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; gTime
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	push	OFFSET ??__FgTime@@YAXXZ		; `dynamic atexit destructor for 'gTime''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__EgTime@@YAXXZ ENDP					; `dynamic initializer for 'gTime''
; Function compile flags: /Odtp
;	COMDAT ??__FgTime@@YAXXZ
text$yd	SEGMENT
??__FgTime@@YAXXZ PROC					; `dynamic atexit destructor for 'gTime'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?gTime@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; gTime
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	pop	ebp
	ret	0
??__FgTime@@YAXXZ ENDP					; `dynamic atexit destructor for 'gTime''
PUBLIC	?gTime@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; gTime
	ALIGN	4

_sa	DB	01H DUP (?)
	ALIGN	4

?gTime@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 01cH DUP (?) ; gTime
_sa$initializer$ DD FLAT:??__Esa@dlib@@YAXXZ
_gTime$initializer$ DD FLAT:??__EgTime@@YAXXZ
END
